
@Mod = global i32 389
@N = global i32 100005
@a_to_the_a = global i32 0
@cnt = global i32 0
@n = global i32 10
@0s0 = global str "Exptest: "
@0s1 = global str "\n"

define i32 @qpow(i32, i32) {

qpow_label0:
    %2 = alloca i32 4
    %3 = alloca i32 4
    %4 = alloca i32 4
    %5 = li i32, i32 1
    store i32 %5, i32* %4(0)

qpow_label1:

qpow_label2:
    %6 = load i32, i32* %3(0)
    beq %6, 0 qpow_label8

qpow_label3:
    %7 = load i32, i32* %3(0)
    %8 = li i32, i32 2
    %9 = div i32 %7, %8
    store i32 %9, i32* %3(0)
    %10 = load i32, i32* %2(0)
    %11 = load i32, i32* %2(0)
    %12 = mul i32 %10, %11
    %13 = la i32*, address @Mod
    %14 = load i32, i32* %13(0)
    %15 = rem i32 %12, %14
    store i32 %15, i32* %2(0)

qpow_label4:
    %16 = load i32, i32* %3(0)
    %17 = li i32, i32 2
    %18 = rem i32 %16, %17
    beq %18, 0 qpow_label6

qpow_label5:
    %19 = load i32, i32* %4(0)
    %20 = load i32, i32* %2(0)
    %21 = mul i32 %19, %20
    %22 = la i32*, address @Mod
    %23 = load i32, i32* %22(0)
    %24 = rem i32 %21, %23
    store i32 %24, i32* %4(0)

qpow_label6:

qpow_label7:
    jump qpow_label1

qpow_label8:
    %25 = load i32, i32* %4(0)
    ret i32 %25
}

define i32 @gcd(i32, i32) {

gcd_label0:
    %2 = alloca i32 4
    %3 = alloca i32 4

gcd_label1:
    %4 = load i32, i32* %3(0)
    %5 = seq i32 %4, 0
    beq %5, 0 gcd_label3

gcd_label2:
    %6 = load i32, i32* %2(0)
    ret i32 %6

gcd_label3:
    %7 = load i32, i32* %3(0)
    %8 = load i32, i32* %2(0)
    %9 = load i32, i32* %3(0)
    %10 = rem i32 %8, %9
    %11 = call i32 @gcd(i32 %7, i32 %10)
    ret i32 %11
}

define i32 @testExp() {

testExp_label0:
    %0 = la i32*, address @a_to_the_a
    %1 = la i32*, address @n
    %2 = load i32, i32* %1(0)
    %3 = la i32*, address @n
    %4 = load i32, i32* %3(0)
    %5 = mul i32 %2, %4
    store i32 %5, i32* %0(0)
    %6 = alloca i32 4
    %7 = la i32*, address @a_to_the_a
    %8 = load i32, i32* %7(0)
    %9 = li i32, i32 1
    %10 = add i32 %8, %9
    store i32 %10, i32* %6(0)
    %11 = alloca i32 4
    %12 = la i32*, address @a_to_the_a
    %13 = load i32, i32* %12(0)
    %14 = load i32, i32* %6(0)
    %15 = call i32 @qpow(i32 %13, i32 %14)
    store i32 %15, i32* %11(0)
    %16 = alloca i32 4
    %17 = la i32*, address @n
    %18 = load i32, i32* %17(0)
    store i32 %18, i32* %16(0)
    %19 = alloca i32 4
    %20 = li i32, i32 0
    store i32 %20, i32* %19(0)

testExp_label1:
    %21 = load i32, i32* %16(0)
    %22 = li i32, i32 0
    bge %21, %22 testExp_label2
    jump testExp_label10

testExp_label2:

testExp_label3:
    %23 = load i32, i32* %16(0)
    %24 = li i32, i32 10
    ble %23, %24 testExp_label4
    jump testExp_label8

testExp_label4:

testExp_label5:
    %25 = load i32, i32* %16(0)
    %26 = la i32*, address @n
    %27 = load i32, i32* %26(0)
    bne %25, %27 testExp_label7

testExp_label6:
    %28 = li i32, i32 30
    store i32 %28, i32* %19(0)

testExp_label7:
    jump testExp_label9

testExp_label8:
    %29 = li i32, i32 20
    store i32 %29, i32* %19(0)

testExp_label9:
    jump testExp_label11

testExp_label10:
    %30 = li i32, i32 10
    store i32 %30, i32* %19(0)

testExp_label11:

testExp_label12:
    %31 = load i32, i32* %16(0)
    %32 = li i32, i32 10
    bgt %31, %32 testExp_label14

testExp_label13:
    %33 = load i32, i32* %19(0)
    %34 = load i32, i32* %16(0)
    %35 = add i32 %33, %34
    store i32 %35, i32* %19(0)

testExp_label14:
    %36 = load i32, i32* %16(0)
    %37 = load i32, i32* %19(0)
    %38 = call i32 @gcd(i32 %36, i32 %37)
    ret i32 %38
}

define i32 @main() {

main_label0:
    %0 = call i32 @testExp()
    call void @0putstr(str @0s0)
    call void @0putint(i32 %0)
    call void @0putstr(str @0s1)
    %1 = li i32, i32 0
    ret i32 %1
}

